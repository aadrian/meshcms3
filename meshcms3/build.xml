<?xml version="1.0"?>

<project name="meshcms" basedir="." default="all">

  <!-- set the version of this build script -->
  <property name="build.script.version" value="0.1" />

  <!--  all properties are in build.properties --> 
  <property file="build.properties" /> 

  <!-- import the svnant task -->
  <import file="${svnant.xml}" />

  <target name="all" description="Do everything">
    <antcall target="clean" />
    <antcall target="init" />
    <antcall target="checkout" />
    <antcall target="dist" />
  </target>
  
  <target name="clean" description="Clean all output directories">
    <delete dir="${src}"/>  
    <delete dir="${build}"/>  
    <delete dir="${dist}"/>  
  </target>

  <target name="init" description="Setup properties depended-on by other tasks and all directories">
    <path id="classpath.path">
      <pathelement location="${servlet.jar}" />
      <pathelement location="${classes}"/>
      <fileset dir="${src}/web/WEB-INF/lib/">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <mkdir dir="${build}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${jars}" />
    <mkdir dir="${dist}" />
  </target>

  <target name="versionCheck" description="Fails if this build script has wrong version for build-essential or src">
    <antcall target="versionCheckBuildEssential" />
    <antcall target="versionCheckSrc" />
  </target>

  <target name="versionCheckBuildEssential" description="Fails if this build script has wrong version for build-essential">
    <xmlproperty prefix="b-e" file="${build-essential}/${build-script-version-file}" />
    <fail message="Incompatible build.xml (${build.script.version}) for build-essential (${b-e.meshcms.build.script.version}) - you need to get compatible build.xml - or try `ant checkoutBuildEssential'">
      <condition><not><equals arg1="${build.script.version}" arg2="${b-e.meshcms.build.script.version}" /></not></condition>
    </fail>
  </target>

  <target name="versionCheckSrc" description="Fails if this build script has wrong version for src">
    <xmlproperty prefix="src" file="${src}/${build-script-version-file}" />
    <fail message="Incompatible build.xml (${build.script.version}) for src (${src.meshcms.build.script.version}) - you need to get compatible build.xml - or try `ant checkout'">
      <condition><not><equals arg1="${build.script.version}" arg2="${src.meshcms.build.script.version}" /></not></condition>
    </fail>
  </target>

  <target name="checkoutBuildEssential" depends="init">
    <svn username="${meshcms.username}" password="${meshcms.password}">
      <checkout url="${meshcms.build-essential.url}/" revision="HEAD" destPath="${src}"/>
    </svn>
    <antcall target="versionCheckBuildEssential" />
  </target>

  <target name="checkout" depends="init,checkoutBuildEssential">
    <svn username="${meshcms.username}" password="${meshcms.password}">
      <checkout url="${meshcms.latest.url}" revision="HEAD" destPath="${src}"/>
    </svn>
    <antcall target="versionCheckSrc" />
  </target>

  <target name="compile" depends="init">
    <!-- Check we have src - we don't depend on checkout as its long running -->
    <fail message="Source needs to be available - try `ant checkout' first">
      <condition><not><available file="${src}" type="dir" /></not></condition>
    </fail>
    <!-- Version check components - fails if version mis-match -->
    <antcall target="versionCheck" />
    <javac target="${targetjvm}" source="${targetjvm}" srcdir="${srcjava}" destdir="${classes}">
      <classpath><path refid="classpath.path"/></classpath>
    </javac>
  </target>

  <!-- NB: Following task is designed to be called internally only -->
  <target name="-buildjar" depends="init,compile" if="meshcms.buildjar" description="Build a jar if and only if this is specified in the properties file">
    <jar basedir="${classes}" destfile="${jars}/${meshcms.version}.jar" />
    <!-- Delete classes so they'll not be found to be copied into webapp -->
    <delete dir="${classes}" />
  </target>

  <target name="webapp" depends="init,compile,-buildjar">
    <!-- Build the webapp first -->
    <copy todir="${webapp}">
      <fileset dir="${src}/web/">
        <exclude name="**/.svn/**"/>
        <exclude name="**/nbproject/**"/>
      </fileset>
    </copy>
    <!-- Attempt to copy .class files (they may have been deleted if building jar -->
    <copy failonerror="false" todir="${webapp}/WEB-INF/classes">
      <fileset dir="${classes}" />
    </copy>
    <!-- Ensure classes dir of webapp exists -->
    <mkdir dir="${webapp}/WEB-INF/classes" />
    <!-- Attempt to copy .jar file - if we're distributing as a jar -->
    <copy failonerror="false" todir="${webapp}/WEB-INF/lib">
      <fileset dir="${jars}" />
    </copy>
    <!-- Let's build the war file -->
    <war destfile="${warfile}" webxml="${webapp}/WEB-INF/web.xml">
      <fileset dir="${webapp}">
        <exclude name="WEB-INF/web.xml"/>
      </fileset>
    </war>
  </target>

  <target name="srczip" depends="init" description="Create a zip file of the src">
    <zip destfile="${srczip}">
      <fileset dir="${srcjava}" />
    </zip>
  </target>

  <target name="javadoc" depends="init" description="Build the javadoc">
    <javadoc sourcepath="${srcjava}" destdir="${javadoc}" packagenames="*">
      <classpath><path refid="classpath.path"/></classpath>
    </javadoc>
  </target>

  <target name="dist" depends="init,webapp,srczip,javadoc">
    <!-- Let's build the distribution .zip - need to do get into sub-dir in zip also -->
    <zip destfile="${dist}/${meshcms.version}.zip">
      <zipfileset file="${readme}"  prefix="${meshcms.version}" />
      <zipfileset file="${license}" prefix="${meshcms.version}" />
      <zipfileset file="${chglog}"  prefix="${meshcms.version}" />
      <zipfileset file="${srczip}"  prefix="${meshcms.version}" />
      <zipfileset dir="${javadoc}"  prefix="${meshcms.version}/javadoc" />
      <zipfileset file="${warfile}" prefix="${meshcms.version}" />
    </zip>
  </target>

</project>

